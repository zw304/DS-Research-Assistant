{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red204\green0\blue78;\red255\green255\blue254;\red0\green0\blue0;
\red39\green78\blue204;\red42\green55\blue62;\red21\green129\blue62;\red238\green57\blue24;\red107\green0\blue1;
}
{\*\expandedcolortbl;;\cssrgb\c84706\c10588\c37647;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c20000\c40392\c83922;\cssrgb\c21569\c27843\c30980;\cssrgb\c5098\c56471\c30980;\cssrgb\c95686\c31765\c11765;\cssrgb\c50196\c0\c0;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ##By Zehui Wu\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf6 \strokec6 *\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.retweets_v2`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 ## try to do text mining to find the word frequency for both tweet and retweet:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## find the top 10 domains that have the highest/lowest fact sore:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #select distinct created_on, count(domain),max(fact_score)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #from `tweet-research-shared.impeachment_2020.domain_fact_scores`\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #join `tweet-research-shared.impeachment_2020.user_details_v20210806_slim` on tweet-research-shared.impeachment_2020.domain_fact_scores.id = tweet-research-shared.impeachment_2020.user_details_v20210806_slim.user_id\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #limit 10; ## would be better using python or r indtead of SQL\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ##1. For domian_fact_score table:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## seems that the fact score of fake news hyper-partisan are both very low, woould like to discover more about the fact score of different fact categories\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf5 \strokec5 distinct\cf4 \strokec4  fact_category, \cf5 \strokec5 max\cf6 \strokec6 (\cf4 \strokec4 fact_score\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  max_fact_score, \cf5 \strokec5 min\cf6 \strokec6 (\cf4 \strokec4 fact_score\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  min_fact_score\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.domain_fact_scores`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  fact_category\cb1 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ; \cb1 \
\
\cf2 \cb3 \strokec2 ## provide an overview for viewers, know that other than Fake News, the Hyper-partisan also have a negative influence on fact_score\cf4 \cb1 \strokec4 \
\
\
\cf2 \cb3 \strokec2 ##2. Then, for 'domian_fact_scores' table:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## order by avg_score ASC --> know the top 10 domains with high fact score\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf5 \strokec5 distinct\cf4 \strokec4  fact_score, domain,\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4   \cf7 \strokec7 `tweet-research-shared.impeachment_2020.domain_fact_scores`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  fact_score,domain\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  fact_score \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ; \cb1 \
\
\cf2 \cb3 \strokec2 ##same idea to know the highest fact_score domain & order by counts:\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  fact_score, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 domain\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  nbr_domains\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4   \cf7 \strokec7 `tweet-research-shared.impeachment_2020.domain_fact_scores`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  fact_score\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  nbr_domains \cf5 \strokec5 ASC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ; \cb1 \
\
\cf2 \cb3 \strokec2 ##compare with the least fact_score, show the order by least order score\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  fact_score, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 domain\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  nbr_domains\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4   \cf7 \strokec7 `tweet-research-shared.impeachment_2020.domain_fact_scores`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  fact_score\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  nbr_domains \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ; \cb1 \
\cf2 \cb3 \strokec2 ##compare with this table and the former table,\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #it seems that the lowers scores's url are mostly used very often while the high fact score url would be unique to use by users. \cf4 \cb1 \strokec4 \
\
\
\cf2 \cb3 \strokec2 ##3. would to discover the relationship between URL and fact scores and user id \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## join recollected_status_urls, but found that there are too many suffix even though the users are coming from the same website\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ##e.g. http://j.mp/2EzmnXH and http://j.mp/2rLfZtE \cf4 \cb1 \strokec4 \
\
\
\cf2 \cb3 \strokec2 ##4. join two tables to discover the nbr frind that con/pro Trump have.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  is_q, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 friend_name\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  nbr_friends\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 join\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.active_user_friends_flat_v2_preview`\cf4 \strokec4  \cf5 \strokec5 on\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \strokec4 .\cf9 \strokec9 screen_names\cf4 \strokec4  = \cf7 \strokec7 `tweet-research-shared.impeachment_2020.active_user_friends_flat_v2_preview`\cf4 \strokec4 .screen_name\cb1 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  is_q\cb1 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 ## seems that con Trump have more friends --> the online media environment is not good for Trump\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ##discover whether pro Trump prefer to retweet or tweet:\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 status_text\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  nbr_retweet, is_q  \cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 join\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.retweets_v2`\cf4 \strokec4  \cf5 \strokec5 on\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \strokec4 .\cf9 \strokec9 screen_names\cf4 \strokec4  = \cf7 \strokec7 `tweet-research-shared.impeachment_2020.retweets_v2`\cf4 \strokec4 .user_screen_name\cb1 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  is_q\cb1 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ;\cb1 \
\
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 status_text\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  nbr_tweet, is_q\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 join\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.tweets_v2`\cf4 \strokec4  \cf5 \strokec5 on\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \strokec4 .\cf9 \strokec9 user_id\cf4 \strokec4  = \cf7 \strokec7 `tweet-research-shared.impeachment_2020.tweets_v2`\cf4 \strokec4 .user_id\cb1 \
\cf5 \cb3 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  is_q\cb1 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 10\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 ##seems that for the retweet, nbr of con trump(50349162) is greater than pro trump(4161743)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## while for the tweet, nbr of con trump(62938876) is also greater than pro trump (4745763) \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## we can therefore know that whatever pro or con, people prefer to use tweet than retweet. \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## we can also know an overall view that, the number of con Trump is far away greater than pro Trump. \cf4 \cb1 \strokec4 \
\
\
\
\cf2 \cb3 \strokec2 ## ---------------------------- ## Mar 1st / 2022  --------------\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Since update of hastags per tweet & mentions per tweet:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## 1. create a new table: we can then discover that: \cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 #create table if not exists `tweet-research-shared.user_zw304.tweet-mention-tag` \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #as( \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #select distinct t.user_id,MAX(user.avg_fact_score), count(mentions.mention) AS mention, count(tags.tag)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #from `tweet-research-shared.impeachment_2020.tweets_v2` t \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #left join `tweet-research-shared.impeachment_2020.status_mentions_v2_flat` mentions on t.user_id = mentions.user_id \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #left join `tweet-research-shared.impeachment_2020.status_tags_v2_flat` tags on mentions.user_id = tags.user_id\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #left join `tweet-research-shared.impeachment_2020.user_details_v20210806_slim` user on tags.user_id = user.user_id\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #group by t.user_id\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #order by mention \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #limit 10;          ## this takes too long time to run, have another try as the following: \cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ## another try for tweet: \cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 create\cf4 \strokec4  \cf5 \strokec5 table\cf4 \strokec4  \cf5 \strokec5 if\cf4 \strokec4  \cf5 \strokec5 not\cf4 \strokec4  \cf5 \strokec5 exists\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.tweet-mention-tag`\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 as\cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf5 \strokec5 distinct\cf4 \strokec4  t.user_id, mention, max_fact_score, num_tags\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.tweets_v2`\cf4 \strokec4  t\cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 select\cf4 \strokec4  user_id, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 mention\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  mention\cb1 \
\cb3     \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.status_mentions_v2_flat`\cf4 \strokec4  \cb1 \
\cb3     \cf5 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  user_id\cb1 \
\cb3     \cf5 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  mention \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4  mentions\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = mentions.user_id\cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 select\cf4 \strokec4  user_id, \cf5 \strokec5 max\cf6 \strokec6 (\cf4 \strokec4 avg_fact_score\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  max_fact_score\cb1 \
\cb3     \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  user_id\cb1 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4  user\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = user.user_id\cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 select\cf4 \strokec4  user_id, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 tag\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  num_tags\cb1 \
\cb3     \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.status_tags_v2_flat`\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  user_id\cb1 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4  tags\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = tags.user_id\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  mention \cf5 \strokec5 DESC\cf6 \strokec6 )\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 ### seems that when tweeting: people who love to mention also have a high numebr of tags included with not very high fact score \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## set 'order by max_fact_score DESC' to see the relative changing: \cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf6 \strokec6 *\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.tweet-mention-tag`\cf4 \strokec4  t\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  max_fact_score \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 100\cf4 \strokec4 ; \cb1 \
\cf2 \cb3 \strokec2 ## seems that a high fact score often relate to mention number around 1000. \cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ## then, set 'max_fact_score ASC' to see the relative changing number of mention & tags: \cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf6 \strokec6 *\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.tweet-mention-tag`\cf4 \strokec4  t\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  max_fact_score \cf5 \strokec5 ASC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 100\cf4 \strokec4 ;  \cb1 \
\
\cf2 \cb3 \strokec2 ## conclusion: seems that for tweet, the a high vlomune of mention and num_tag does not mean an overall high fact score\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## INSTEAD OF this, a high fact score seems have a specifc range of mention# (1000) and tag# (100~300)\cf4 \cb1 \strokec4 \
\
\
\cf2 \cb3 \strokec2 #### for retweet: \cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 create\cf4 \strokec4  \cf5 \strokec5 table\cf4 \strokec4  \cf5 \strokec5 if\cf4 \strokec4  \cf5 \strokec5 not\cf4 \strokec4  \cf5 \strokec5 exists\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.retweet-mention-tag`\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 as\cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf5 \strokec5 distinct\cf4 \strokec4  t.user_id, mention, max_fact_score, num_tags\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.retweets_v2`\cf4 \strokec4  t\cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 select\cf4 \strokec4  user_id, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 mention\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  mention\cb1 \
\cb3     \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.status_mentions_v2_flat`\cf4 \strokec4  \cb1 \
\cb3     \cf5 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  user_id\cb1 \
\cb3     \cf5 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  mention \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4  mentions\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = mentions.user_id\cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 select\cf4 \strokec4  user_id, \cf5 \strokec5 max\cf6 \strokec6 (\cf4 \strokec4 avg_fact_score\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  max_fact_score\cb1 \
\cb3     \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  user_id\cb1 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4  user\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = user.user_id\cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 select\cf4 \strokec4  user_id, \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec4 tag\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  num_tags\cb1 \
\cb3     \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.status_tags_v2_flat`\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 group\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  user_id\cb1 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4  tags\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = tags.user_id\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  mention \cf5 \strokec5 DESC\cf6 \strokec6 )\cf4 \strokec4 ; \cb1 \
\
\cf2 \cb3 \strokec2 ### compare to tweet, set retweet table as 'order by max_fact_score ASC'\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf6 \strokec6 *\cf4 \strokec4  \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.retweet-mention-tag`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  max_fact_score \cf5 \strokec5 ASC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 100\cf4 \strokec4 ;   \cf2 \strokec2 ## the numbers of mention anf tags are much smaller than tweet, but still very high, num_tags are unstable \cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ### compare to tweet, set retweet table as 'order by max_fact_score DESC'\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  \cf6 \strokec6 *\cf4 \strokec4  \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.retweet-mention-tag`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  max_fact_score \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 limit\cf4 \strokec4  \cf8 \strokec8 100\cf4 \strokec4 ; \cb1 \
\cf2 \cb3 \strokec2 ## GET THE RANGE of a high fact score: mention below 1000 mostly around 800, num_tags required(is not null)\cf4 \cb1 \strokec4 \
\
\
\cf2 \cb3 \strokec2 ## --> using left join tweet table there are many null tags, & for one post, there are multiple mentions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## --> people prefer to mention instead of using tags\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## --> save this table for future usage, mention -->  spread --> what is the fact socre?\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ### to follow up last week's research about domians & tweet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ### try the following query: \cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 create\cf4 \strokec4  \cf5 \strokec5 table\cf4 \strokec4  \cf5 \strokec5 if\cf4 \strokec4  \cf5 \strokec5 not\cf4 \strokec4  \cf5 \strokec5 exists\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.tweet-tag-q`\cf4 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 as\cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 select\cf4 \strokec4  profile.\cf6 \strokec6 *\cf4 \strokec4  , t.num_tags,q.is_q \cf5 \strokec5 from\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.profile_tags_v2_flat`\cf4 \strokec4  profile \cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.user_zw304.tweet-mention-tag`\cf4 \strokec4  t\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  profile.\cf9 \strokec9 user_id\cf4 \strokec4  = t.user_id \cb1 \
\cf5 \cb3 \strokec5 left\cf4 \strokec4  \cf5 \strokec5 join\cf4 \strokec4  \cf7 \strokec7 `tweet-research-shared.impeachment_2020.user_details_v20210806_slim`\cf4 \strokec4 q\cb1 \
\cf5 \cb3 \strokec5 on\cf4 \strokec4  t.\cf9 \strokec9 user_id\cf4 \strokec4  = q.user_id\cb1 \
\cf5 \cb3 \strokec5 order\cf4 \strokec4  \cf5 \strokec5 by\cf4 \strokec4  t.num_tags \cf5 \strokec5 DESC\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ## lots of information from this table(tweet related): order by the number of tags\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## we can see the most frequent tags and the related q status\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## seems that the non-q would have more tags than is_q\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
}